def exitCodes = [:]

MPPTools.addTimeListener(project)

def dist = findProperty('org.jetbrains.kotlin.native.home') ?: 'dist'
task konanRun {
    mkdir buildDir.absolutePath
    (1..project.ext.repeatNumber).each {
        dependsOn "runCompileTime$it"
    }
}

(1..project.ext.repeatNumber).each {
    tasks.create(name: "runCompileTime$it", type:Exec) {
        commandLine "${project.getProjectDir()}/$dist/bin/konanc", "${project.getProjectDir()}/src/main/kotlin/main.kt", "-o",
                "${buildDir.absolutePath}/program${MPPTools.getNativeProgramExtension()}"
        ignoreExitValue true
        doLast {
            exitCodes[name] = execResult.exitValue
        }
    }
}

task clean {
    doLast {
        delete "${buildDir.absolutePath}"
    }
}

task konanJsonReport {
    doLast {
        def nativeCompileTime = MPPTools.getCompileBenchmarkTime(project.ext.applicationName, "runCompileTime", project.ext.repeatNumber, exitCodes)
        def nativeExecutable = "${buildDir.absolutePath}/program${MPPTools.getNativeProgramExtension()}"
        def properties = getCommonProperties() + ['type': 'native',
                                                  'compilerVersion': "${konanVersion}".toString(),
                                                  'benchmarks': "[]",
                                                  'compileTime': nativeCompileTime,
                                                  'codeSize': MPPTools.getCodeSizeBenchmark(project.ext.applicationName, nativeExecutable) ]
        def output = MPPTools.createJsonReport(properties)
        new File("${buildDir.absolutePath}/${nativeJson}").write(output)
    }
}
task jvmRun {
    println("JVM run isn't supported")
}

task jvmJsonReport {
    doLast {
        println("JVM run isn't supported")
    }
}

jvmRun.finalizedBy jvmJsonReport
konanRun.finalizedBy konanJsonReport

private def getCommonProperties() {
    return ['cpu': System.getProperty("os.arch"),
            'os': System.getProperty("os.name"), // OperatingSystem.current().getName()
            'jdkVersion': System.getProperty("java.version"), // org.gradle.internal.jvm.Jvm.current().javaVersion
            'jdkVendor': System.getProperty("java.vendor"),
            'kotlinVersion': "${kotlinVersion}".toString()]
}

